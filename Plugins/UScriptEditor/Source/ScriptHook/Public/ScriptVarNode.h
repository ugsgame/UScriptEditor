// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCRIPTVARNODE_NSCRIPTHOOK_H_
#define FLATBUFFERS_GENERATED_SCRIPTVARNODE_NSCRIPTHOOK_H_

#include "flatbuffers/flatbuffers.h"

namespace NScriptHook {

struct FVarNode;

struct FVarNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODEMASK = 4,
    VT_VARNAME = 6,
    VT_VARVALUE = 8,
    VT_VARTYPE = 10,
    VT_NODECHILDREN = 12
  };
  const flatbuffers::Vector<int32_t> *NodeMask() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NODEMASK);
  }
  const flatbuffers::String *VarName() const {
    return GetPointer<const flatbuffers::String *>(VT_VARNAME);
  }
  const flatbuffers::String *VarValue() const {
    return GetPointer<const flatbuffers::String *>(VT_VARVALUE);
  }
  const flatbuffers::String *VarType() const {
    return GetPointer<const flatbuffers::String *>(VT_VARTYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FVarNode>> *NodeChildren() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FVarNode>> *>(VT_NODECHILDREN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODEMASK) &&
           verifier.VerifyVector(NodeMask()) &&
           VerifyOffset(verifier, VT_VARNAME) &&
           verifier.VerifyString(VarName()) &&
           VerifyOffset(verifier, VT_VARVALUE) &&
           verifier.VerifyString(VarValue()) &&
           VerifyOffset(verifier, VT_VARTYPE) &&
           verifier.VerifyString(VarType()) &&
           VerifyOffset(verifier, VT_NODECHILDREN) &&
           verifier.VerifyVector(NodeChildren()) &&
           verifier.VerifyVectorOfTables(NodeChildren()) &&
           verifier.EndTable();
  }
};

struct FVarNodeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_NodeMask(flatbuffers::Offset<flatbuffers::Vector<int32_t>> NodeMask) {
    fbb_.AddOffset(FVarNode::VT_NODEMASK, NodeMask);
  }
  void add_VarName(flatbuffers::Offset<flatbuffers::String> VarName) {
    fbb_.AddOffset(FVarNode::VT_VARNAME, VarName);
  }
  void add_VarValue(flatbuffers::Offset<flatbuffers::String> VarValue) {
    fbb_.AddOffset(FVarNode::VT_VARVALUE, VarValue);
  }
  void add_VarType(flatbuffers::Offset<flatbuffers::String> VarType) {
    fbb_.AddOffset(FVarNode::VT_VARTYPE, VarType);
  }
  void add_NodeChildren(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FVarNode>>> NodeChildren) {
    fbb_.AddOffset(FVarNode::VT_NODECHILDREN, NodeChildren);
  }
  explicit FVarNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FVarNodeBuilder &operator=(const FVarNodeBuilder &);
  flatbuffers::Offset<FVarNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FVarNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FVarNode> CreateFVarNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> NodeMask = 0,
    flatbuffers::Offset<flatbuffers::String> VarName = 0,
    flatbuffers::Offset<flatbuffers::String> VarValue = 0,
    flatbuffers::Offset<flatbuffers::String> VarType = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FVarNode>>> NodeChildren = 0) {
  FVarNodeBuilder builder_(_fbb);
  builder_.add_NodeChildren(NodeChildren);
  builder_.add_VarType(VarType);
  builder_.add_VarValue(VarValue);
  builder_.add_VarName(VarName);
  builder_.add_NodeMask(NodeMask);
  return builder_.Finish();
}

inline flatbuffers::Offset<FVarNode> CreateFVarNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *NodeMask = nullptr,
    const char *VarName = nullptr,
    const char *VarValue = nullptr,
    const char *VarType = nullptr,
    const std::vector<flatbuffers::Offset<FVarNode>> *NodeChildren = nullptr) {
  auto NodeMask__ = NodeMask ? _fbb.CreateVector<int32_t>(*NodeMask) : 0;
  auto VarName__ = VarName ? _fbb.CreateString(VarName) : 0;
  auto VarValue__ = VarValue ? _fbb.CreateString(VarValue) : 0;
  auto VarType__ = VarType ? _fbb.CreateString(VarType) : 0;
  auto NodeChildren__ = NodeChildren ? _fbb.CreateVector<flatbuffers::Offset<FVarNode>>(*NodeChildren) : 0;
  return NScriptHook::CreateFVarNode(
      _fbb,
      NodeMask__,
      VarName__,
      VarValue__,
      VarType__,
      NodeChildren__);
}

}  // namespace NScriptHook

#endif  // FLATBUFFERS_GENERATED_SCRIPTVARNODE_NSCRIPTHOOK_H_
