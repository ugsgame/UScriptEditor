// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCRIPTHOOKDEAL_NSCRIPTHOOK_H_
#define FLATBUFFERS_GENERATED_SCRIPTHOOKDEAL_NSCRIPTHOOK_H_

#include "flatbuffers/flatbuffers.h"

namespace NScriptHook {

struct FHookDeal;

struct FHookDeal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEALORDER = 4,
    VT_DEALDATA = 6
  };
  uint8_t DealOrder() const {
    return GetField<uint8_t>(VT_DEALORDER, 0);
  }
  const flatbuffers::Vector<uint8_t> *DealData() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DEALDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DEALORDER) &&
           VerifyOffset(verifier, VT_DEALDATA) &&
           verifier.VerifyVector(DealData()) &&
           verifier.EndTable();
  }
};

struct FHookDealBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_DealOrder(uint8_t DealOrder) {
    fbb_.AddElement<uint8_t>(FHookDeal::VT_DEALORDER, DealOrder, 0);
  }
  void add_DealData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> DealData) {
    fbb_.AddOffset(FHookDeal::VT_DEALDATA, DealData);
  }
  explicit FHookDealBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FHookDealBuilder &operator=(const FHookDealBuilder &);
  flatbuffers::Offset<FHookDeal> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FHookDeal>(end);
    return o;
  }
};

inline flatbuffers::Offset<FHookDeal> CreateFHookDeal(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t DealOrder = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> DealData = 0) {
  FHookDealBuilder builder_(_fbb);
  builder_.add_DealData(DealData);
  builder_.add_DealOrder(DealOrder);
  return builder_.Finish();
}

inline flatbuffers::Offset<FHookDeal> CreateFHookDealDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t DealOrder = 0,
    const std::vector<uint8_t> *DealData = nullptr) {
  auto DealData__ = DealData ? _fbb.CreateVector<uint8_t>(*DealData) : 0;
  return NScriptHook::CreateFHookDeal(
      _fbb,
      DealOrder,
      DealData__);
}

inline const NScriptHook::FHookDeal *GetFHookDeal(const void *buf) {
  return flatbuffers::GetRoot<NScriptHook::FHookDeal>(buf);
}

inline const NScriptHook::FHookDeal *GetSizePrefixedFHookDeal(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<NScriptHook::FHookDeal>(buf);
}

inline bool VerifyFHookDealBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NScriptHook::FHookDeal>(nullptr);
}

inline bool VerifySizePrefixedFHookDealBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NScriptHook::FHookDeal>(nullptr);
}

inline void FinishFHookDealBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NScriptHook::FHookDeal> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFHookDealBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NScriptHook::FHookDeal> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace NScriptHook

#endif  // FLATBUFFERS_GENERATED_SCRIPTHOOKDEAL_NSCRIPTHOOK_H_
