// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCRIPTSTACKNODE_NSCRIPTHOOK_H_
#define FLATBUFFERS_GENERATED_SCRIPTSTACKNODE_NSCRIPTHOOK_H_

#include "flatbuffers/flatbuffers.h"

namespace NScriptHook {

struct FStackNode;

struct FStackNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STACKINDEX = 4,
    VT_LINE = 6,
    VT_FILEPATH = 8,
    VT_FUNCINFO = 10
  };
  int32_t StackIndex() const {
    return GetField<int32_t>(VT_STACKINDEX, 0);
  }
  int32_t Line() const {
    return GetField<int32_t>(VT_LINE, 0);
  }
  const flatbuffers::String *FilePath() const {
    return GetPointer<const flatbuffers::String *>(VT_FILEPATH);
  }
  const flatbuffers::String *FuncInfo() const {
    return GetPointer<const flatbuffers::String *>(VT_FUNCINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STACKINDEX) &&
           VerifyField<int32_t>(verifier, VT_LINE) &&
           VerifyOffset(verifier, VT_FILEPATH) &&
           verifier.VerifyString(FilePath()) &&
           VerifyOffset(verifier, VT_FUNCINFO) &&
           verifier.VerifyString(FuncInfo()) &&
           verifier.EndTable();
  }
};

struct FStackNodeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_StackIndex(int32_t StackIndex) {
    fbb_.AddElement<int32_t>(FStackNode::VT_STACKINDEX, StackIndex, 0);
  }
  void add_Line(int32_t Line) {
    fbb_.AddElement<int32_t>(FStackNode::VT_LINE, Line, 0);
  }
  void add_FilePath(flatbuffers::Offset<flatbuffers::String> FilePath) {
    fbb_.AddOffset(FStackNode::VT_FILEPATH, FilePath);
  }
  void add_FuncInfo(flatbuffers::Offset<flatbuffers::String> FuncInfo) {
    fbb_.AddOffset(FStackNode::VT_FUNCINFO, FuncInfo);
  }
  explicit FStackNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FStackNodeBuilder &operator=(const FStackNodeBuilder &);
  flatbuffers::Offset<FStackNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FStackNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FStackNode> CreateFStackNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t StackIndex = 0,
    int32_t Line = 0,
    flatbuffers::Offset<flatbuffers::String> FilePath = 0,
    flatbuffers::Offset<flatbuffers::String> FuncInfo = 0) {
  FStackNodeBuilder builder_(_fbb);
  builder_.add_FuncInfo(FuncInfo);
  builder_.add_FilePath(FilePath);
  builder_.add_Line(Line);
  builder_.add_StackIndex(StackIndex);
  return builder_.Finish();
}

inline flatbuffers::Offset<FStackNode> CreateFStackNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t StackIndex = 0,
    int32_t Line = 0,
    const char *FilePath = nullptr,
    const char *FuncInfo = nullptr) {
  auto FilePath__ = FilePath ? _fbb.CreateString(FilePath) : 0;
  auto FuncInfo__ = FuncInfo ? _fbb.CreateString(FuncInfo) : 0;
  return NScriptHook::CreateFStackNode(
      _fbb,
      StackIndex,
      Line,
      FilePath__,
      FuncInfo__);
}

}  // namespace NScriptHook

#endif  // FLATBUFFERS_GENERATED_SCRIPTSTACKNODE_NSCRIPTHOOK_H_
