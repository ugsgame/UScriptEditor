// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCRIPTDEBUGINFO_NSCRIPTHOOK_H_
#define FLATBUFFERS_GENERATED_SCRIPTDEBUGINFO_NSCRIPTHOOK_H_

#include "flatbuffers/flatbuffers.h"

#include "ScriptStackNode.h"
#include "ScriptVarNode.h"

namespace NScriptHook {

struct FDebugInfo;

struct FDebugInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILEPATH = 4,
    VT_LINE = 6,
    VT_STACKLIST = 8,
    VT_VARLIST = 10
  };
  const flatbuffers::String *FilePath() const {
    return GetPointer<const flatbuffers::String *>(VT_FILEPATH);
  }
  int32_t Line() const {
    return GetField<int32_t>(VT_LINE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FStackNode>> *StackList() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FStackNode>> *>(VT_STACKLIST);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FVarNode>> *VarList() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FVarNode>> *>(VT_VARLIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILEPATH) &&
           verifier.VerifyString(FilePath()) &&
           VerifyField<int32_t>(verifier, VT_LINE) &&
           VerifyOffset(verifier, VT_STACKLIST) &&
           verifier.VerifyVector(StackList()) &&
           verifier.VerifyVectorOfTables(StackList()) &&
           VerifyOffset(verifier, VT_VARLIST) &&
           verifier.VerifyVector(VarList()) &&
           verifier.VerifyVectorOfTables(VarList()) &&
           verifier.EndTable();
  }
};

struct FDebugInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FilePath(flatbuffers::Offset<flatbuffers::String> FilePath) {
    fbb_.AddOffset(FDebugInfo::VT_FILEPATH, FilePath);
  }
  void add_Line(int32_t Line) {
    fbb_.AddElement<int32_t>(FDebugInfo::VT_LINE, Line, 0);
  }
  void add_StackList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FStackNode>>> StackList) {
    fbb_.AddOffset(FDebugInfo::VT_STACKLIST, StackList);
  }
  void add_VarList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FVarNode>>> VarList) {
    fbb_.AddOffset(FDebugInfo::VT_VARLIST, VarList);
  }
  explicit FDebugInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FDebugInfoBuilder &operator=(const FDebugInfoBuilder &);
  flatbuffers::Offset<FDebugInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FDebugInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FDebugInfo> CreateFDebugInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> FilePath = 0,
    int32_t Line = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FStackNode>>> StackList = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FVarNode>>> VarList = 0) {
  FDebugInfoBuilder builder_(_fbb);
  builder_.add_VarList(VarList);
  builder_.add_StackList(StackList);
  builder_.add_Line(Line);
  builder_.add_FilePath(FilePath);
  return builder_.Finish();
}

inline flatbuffers::Offset<FDebugInfo> CreateFDebugInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *FilePath = nullptr,
    int32_t Line = 0,
    const std::vector<flatbuffers::Offset<FStackNode>> *StackList = nullptr,
    const std::vector<flatbuffers::Offset<FVarNode>> *VarList = nullptr) {
  auto FilePath__ = FilePath ? _fbb.CreateString(FilePath) : 0;
  auto StackList__ = StackList ? _fbb.CreateVector<flatbuffers::Offset<FStackNode>>(*StackList) : 0;
  auto VarList__ = VarList ? _fbb.CreateVector<flatbuffers::Offset<FVarNode>>(*VarList) : 0;
  return NScriptHook::CreateFDebugInfo(
      _fbb,
      FilePath__,
      Line,
      StackList__,
      VarList__);
}

inline const NScriptHook::FDebugInfo *GetFDebugInfo(const void *buf) {
  return flatbuffers::GetRoot<NScriptHook::FDebugInfo>(buf);
}

inline const NScriptHook::FDebugInfo *GetSizePrefixedFDebugInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<NScriptHook::FDebugInfo>(buf);
}

inline bool VerifyFDebugInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NScriptHook::FDebugInfo>(nullptr);
}

inline bool VerifySizePrefixedFDebugInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NScriptHook::FDebugInfo>(nullptr);
}

inline void FinishFDebugInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NScriptHook::FDebugInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFDebugInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NScriptHook::FDebugInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace NScriptHook

#endif  // FLATBUFFERS_GENERATED_SCRIPTDEBUGINFO_NSCRIPTHOOK_H_
