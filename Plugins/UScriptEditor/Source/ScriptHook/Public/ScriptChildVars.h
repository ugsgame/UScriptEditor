// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCRIPTCHILDVARS_NSCRIPTHOOK_H_
#define FLATBUFFERS_GENERATED_SCRIPTCHILDVARS_NSCRIPTHOOK_H_

#include "flatbuffers/flatbuffers.h"

#include "ScriptVarNode.h"

namespace NScriptHook {

struct FChildVars;

struct FChildVars FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODEMASK = 4,
    VT_VARLIST = 6
  };
  const flatbuffers::Vector<int32_t> *NodeMask() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NODEMASK);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FVarNode>> *VarList() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FVarNode>> *>(VT_VARLIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODEMASK) &&
           verifier.VerifyVector(NodeMask()) &&
           VerifyOffset(verifier, VT_VARLIST) &&
           verifier.VerifyVector(VarList()) &&
           verifier.VerifyVectorOfTables(VarList()) &&
           verifier.EndTable();
  }
};

struct FChildVarsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_NodeMask(flatbuffers::Offset<flatbuffers::Vector<int32_t>> NodeMask) {
    fbb_.AddOffset(FChildVars::VT_NODEMASK, NodeMask);
  }
  void add_VarList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FVarNode>>> VarList) {
    fbb_.AddOffset(FChildVars::VT_VARLIST, VarList);
  }
  explicit FChildVarsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FChildVarsBuilder &operator=(const FChildVarsBuilder &);
  flatbuffers::Offset<FChildVars> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FChildVars>(end);
    return o;
  }
};

inline flatbuffers::Offset<FChildVars> CreateFChildVars(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> NodeMask = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FVarNode>>> VarList = 0) {
  FChildVarsBuilder builder_(_fbb);
  builder_.add_VarList(VarList);
  builder_.add_NodeMask(NodeMask);
  return builder_.Finish();
}

inline flatbuffers::Offset<FChildVars> CreateFChildVarsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *NodeMask = nullptr,
    const std::vector<flatbuffers::Offset<FVarNode>> *VarList = nullptr) {
  auto NodeMask__ = NodeMask ? _fbb.CreateVector<int32_t>(*NodeMask) : 0;
  auto VarList__ = VarList ? _fbb.CreateVector<flatbuffers::Offset<FVarNode>>(*VarList) : 0;
  return NScriptHook::CreateFChildVars(
      _fbb,
      NodeMask__,
      VarList__);
}

inline const NScriptHook::FChildVars *GetFChildVars(const void *buf) {
  return flatbuffers::GetRoot<NScriptHook::FChildVars>(buf);
}

inline const NScriptHook::FChildVars *GetSizePrefixedFChildVars(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<NScriptHook::FChildVars>(buf);
}

inline bool VerifyFChildVarsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NScriptHook::FChildVars>(nullptr);
}

inline bool VerifySizePrefixedFChildVarsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NScriptHook::FChildVars>(nullptr);
}

inline void FinishFChildVarsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NScriptHook::FChildVars> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFChildVarsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NScriptHook::FChildVars> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace NScriptHook

#endif  // FLATBUFFERS_GENERATED_SCRIPTCHILDVARS_NSCRIPTHOOK_H_
